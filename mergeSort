import java.util.Scanner;

public class mergeSort{
	public static void main(String [] args){
	Scanner input = new Scanner(System.in);
	System.out.println("How many num?");
	int num = input.nextInt();

	double [] a = new double [num];
	for (int i = 0; i<num; i++)
			a[i] = Math.random()*100;


	double [] z = merge(a);


	for (int j =0; j<num; j++)
		System.out.println(z[j]);
	}

public static double [] merge(double [] a)
{
double temp; 

if (a.length == 1)
	return a;

double [] left = new double [(int)(a.length/2)];
double [] right = new double [a.length-(int)(a.length/2)];


for (int i = 0; i<left.length; i++)
	left[i] = a[i];

for (int t = 0; t<right.length; t++)
	right[t] = a[a.length-1-t];

double [] leftnew = merge(left);
double [] rightnew = merge(right);

double [] sort = new double [a.length];

int leftCount = 0; 
int rightCount = 0;

while (leftCount < leftnew.length || rightCount < rightnew.length)
{
	if (leftCount < leftnew.length && rightCount < rightnew.length)
	{
		if (leftnew[leftCount] < rightnew[rightCount])
		{
			sort[leftCount+rightCount] = leftnew[leftCount];
			leftCount++;
		}

		else
		{
			sort[leftCount+rightCount] = rightnew[rightCount];
			rightCount++;
		}
	}

	else if (leftCount < leftnew.length)
	{
		sort [leftCount+rightCount] = leftnew[leftCount];
		leftCount++;
	}

	else if (rightCount < rightnew.length)
	{
		sort [rightCount+leftCount] = rightnew[rightCount];
		rightCount++;
	}

}
return sort;	
}

}
